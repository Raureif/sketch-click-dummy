@import 'library.js';
@import 'sandbox.js';

var toggleLinkLayers = function (context) {
  var doc = context.document

  var didShowLayers = toggle(context);

  if (didShowLayers === true){
    doc.showMessage('Link layers shown.');
  } else {
    doc.showMessage('Link layers hidden.');
  }
}

var exportClickDummy = function(context) {

  var doc = context.document

  // open the system dialog to choose the export location
  var fileURL = fileSaver();
  var exportPath = fileURL.path() + '/' + [doc displayName] + '-ClickDummy/';

  // Authorize Sketch to save a file
  // new AppSandbox().authorize(exportPath, exportClickDummy);


  // HTML will be exported to a new folder in the .sketch file's parent folder
  // var exportPath = [[doc fileURL] path] + '-ClickDummy/';

  var html = '';
  var artboardNames = [];
  var linkTargets = [];

  var HTML_HEAD = '<!DOCTYPE html>\n\
  <html lang="en">\n\
  <head>\n\
    <meta charset="utf-8">\n\
    <title>' + [doc displayName] + '</title>\n\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\
    <script type="text/javascript"> \n\
      document.onmousedown = function() { \n\
        document.body.setAttribute("class", "is-highlighted"); \n\
      } \n\
      document.onmouseup = function() { \n\
        document.body.setAttribute("class", ""); \n\
      } \n\
    </script> \n\
    <style> \n\
      html, body { \n\
        padding: 0; \n\
        margin: 0; \n\
      } \n\
      body { \n\
        text-align: center; \n\
      } \n\
      a { \n\
        position: absolute; \n\
        z-index: 100; \n\
      } \n\
      body.is-highlighted a { \n\
        background-color: #0000ff; \n\
        opacity: .2; \n\
      } \n\
      main { \n\
        position: relative; \n\
        display: inline-block; \n\
      } \n\
    </style> \n\
  </head>\n\
  <body><main>\n';

  var HTML_FOOT = '</main></body></html>\n';

  var artboards = doc.currentPage().artboards().objectEnumerator();

  createFolder(exportPath);

  while (artboard = artboards.nextObject()){

    var artboardName = artboard.name().trim();
    artboardNames.push(artboardName);

    var img1x = 'img/' + artboardName + '.png';
     // var img2x = 'img/' + artboardName + '-2x.png';

    html = HTML_HEAD;
    html += '<!-- ' + artboardName + ' -->\n';
    html += '<img src="' + img1x + /*'" srcset="' + img2x + ' 2x*/'">\n';

    var layers = artboard.children().objectEnumerator();
    while (layer = layers.nextObject()) {
      var name = layer.name();

      for(var i = 0; i<linkLayerPrefix.length; i++) {
        var prefix = linkLayerPrefix[i];

        if (name === prefix || name.indexOf(prefix) !== -1) {
          var linkTarget = name.substr(prefix.length);
          linkTargets.push(linkTarget);
          if (linkTarget !== '' && linkTarget !== null && linkTarget !== undefined) {
            linkTarget = linkTarget + '.html';
          } else {
            linkTarget = '';
          }
          if (typeof layer.frame === 'function') {
            var lx = layer.frame().x();
            var ly = layer.frame().y();
            var lw = layer.frame().width();
            var lh = layer.frame().height();
            html = html + '<a href="' + linkTarget + '" target="' + linkTargetAttribute[i] + '" style="left: ' + lx + 'px; top: ' + ly + 'px; width: ' + lw + 'px; height: ' + lh + 'px"></a>\n';
            log(html);
          }
        }
      } //for
    } //while layers
    html += HTML_FOOT;
    var htmlPath = exportPath + artboardName + '.html';
    saveTextToFile(htmlPath, html);
  }

  hideLinkLayers(context);

  var slices = doc.currentPage().artboards().objectEnumerator();

  while (slice = slices.nextObject()) {

    [doc saveArtboardOrSlice:slice toFile:exportPath + 'img/' + slice.name() + '.png'];

    // FIXME: This doesn’t work.:(
    // slice.scale = 2;
    // [doc saveArtboardOrSlice:tempSlice toFile:exportPath + 'img/' + slice.name() + '-2x.png'];
  }

  showLinkLayers(context);

  displayMissingArtboardsWarnings(linkTargets, artboardNames);

  doc.showMessage('Click dummy files exported to: ' + exportPath);

};


function displayMissingArtboardsWarnings (targets, artboards) {
  // Display a warning if there are link targets on this page that don't have a corresponding artboard
  var warnings = '';
  targets.sort();
  for (var i = 0; i < targets.length; i++) {
    var target = targets[i];
    if (artboards.indexOf(target) === -1) {
      warnings += '\n· ' + target
    };
  };

  if (warnings !== '') {
    warnings += '\n\nDon’t worry, the prototype will be exported anyway.'
    var app = [NSApplication sharedApplication];
    [app displayDialog:warnings withTitle:"There are links to missing artboards:"];
  }
}

function createFolder(name) {
  var fileManager = [NSFileManager defaultManager];
  [fileManager createDirectoryAtPath:name withIntermediateDirectories:true attributes:nil error:nil];
}

function saveTextToFile (filename, text) {
  var path = [@"" stringByAppendingString:filename];
  var str = [@"" stringByAppendingString:text];
  str.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(path, true);
}

function fileSaver() {
    // Panel
    var openPanel = [NSOpenPanel openPanel]

    [openPanel setTitle: "Choose a location…"]
    [openPanel setMessage: "Select the export location…"];
    [openPanel setPrompt: "Export"];

    [openPanel setCanCreateDirectories: true]
    [openPanel setCanChooseFiles: false]
    [openPanel setCanChooseDirectories: true]
    [openPanel setAllowsMultipleSelection: false]
    [openPanel setShowsHiddenFiles: false]
    [openPanel setExtensionHidden: false]

    // [openPanel setDirectoryURL:url]

    var openPanelButtonPressed = [openPanel runModal]
    if (openPanelButtonPressed == NSFileHandlingPanelOKButton) {
        allowedUrl = [openPanel URL]
    }
    return allowedUrl
}

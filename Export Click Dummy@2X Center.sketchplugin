// (shift control cmd f)

#import 'library.js'
#import 'sandbox.js'


// open the system dialog to choose the export location
var fileURL = fileSaver();
var exportPath = fileURL.path() + '/' + [doc displayName] + '-ClickDummy2X/';

// Authorize Sketch to save a file
new AppSandbox().authorize(exportPath, exportClickDummy);


function exportClickDummy () {

  // HTML will be exported to a new folder in the .sketch file's parent folder
  // var exportPath = [[doc fileURL] path] + '-ClickDummy/';

  var html = '';
  var artboardNames = [];
  var linkTargets = [];

  var HTML_HEAD = '<!DOCTYPE html>\n\
  <html lang="en">\n\
  <head>\n\
    <meta charset="utf-8">\n\
    <title>' + [doc displayName] + '</title>\n\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\
    <script type="text/javascript"> \n\
      document.onmousedown = function() { \n\
        document.body.setAttribute("class", "is-highlighted"); \n\
      } \n\
      document.onmouseup = function() { \n\
        document.body.setAttribute("class", ""); \n\
      } \n\
    </script> \n\
    <style> \n\
      html, body { \n\
        padding: 0; \n\
        margin: 0; \n\
      } \n\
      a { \n\
        position: absolute; \n\
        z-index: 100; \n\
      } \n\
      body.is-highlighted a { \n\
        background-color: #0000ff; \n\
        opacity: .2; \n\
      } \n\
    </style> \n\
  </head>\n\
  <body>\n\
  <div id="container">\n';

  var HTML_FOOT = '</div></body></html>\n';

  var artboards = doc.currentPage().artboards().objectEnumerator();

  createFolder(exportPath);

  while (artboard = artboards.nextObject()) {

    var artboardName = artboard.name().trim();
    var artboardWidth = [[artboard frame] width];

    artboardNames.push(artboardName);

    html = HTML_HEAD;
    html += '<!-- ' + artboardName + ' -->\n';
    html += '<img src="img/' + artboardName + '.png" width="'+ artboardWidth +'">\n';

    var layers = artboard.children().objectEnumerator();

    while (layer = layers.nextObject()) {

      var name = layer.name();

      if (name === linkLayerPrefix || name.indexOf(linkLayerPrefix) !== -1) {

        var linkTarget = name.substr(linkLayerPrefix.length);
        linkTargets.push(linkTarget);

        if (linkTarget !== '' && linkTarget !== null && linkTarget !== undefined) {
          linkTarget = linkTarget + '.html';
        } else {
          linkTarget = '';
        }

        if (typeof layer.frame === 'function') {
          var lx = layer.frame().x();
          var ly = layer.frame().y();
          var lw = layer.frame().width();
          var lh = layer.frame().height();
          html = html + '<a href="' + linkTarget + '" style="left: ' + lx + 'px; top: ' + ly + 'px; width: ' + lw + 'px; height: ' + lh + 'px"></a>\n';
        }
      }
    }
    
    html += '<style>#container { width:' + artboardWidth + 'px;position:relative;margin:0 auto; } a:hover { opacity: 0.4; border:1px solid #d4d4d4; background-color:#f4f4f4; }</style>';
    html += HTML_FOOT;

    var htmlPath = exportPath + artboardName + '.html';
    saveTextToFile(htmlPath, html);
  }

  hideLinkLayers();

  var slices = doc.currentPage().artboards().objectEnumerator();

  while (slice = slices.nextObject()) {

	var slice1 = copy_layer_with_factor(slice, 2);
    [doc saveArtboardOrSlice:slice1 toFile:exportPath + 'img/' + slice.name() + '.png'];

  }

  showLinkLayers();

  displayMissingArtboardsWarnings(linkTargets, artboardNames);

  doc.showMessage('Click dummy files exported to: ' + exportPath);
}

function displayMissingArtboardsWarnings (targets, artboards) {
  // Display a warning if there are link targets on this page that don't have a corresponding artboard
  var warnings = '';
  targets.sort();
  for (var i = 0; i < targets.length; i++) {
    var target = targets[i];
    if (artboards.indexOf(target) === -1) {
      warnings += '\n· ' + target
    };
  };

  if (warnings !== '') {
    warnings += '\n\nDon’t worry, the prototype will be exported anyway.'
    var app = [NSApplication sharedApplication];
    [app displayDialog:warnings withTitle:"There are links to missing artboards:"];
  }
}

function createFolder(name) {
  var fileManager = [NSFileManager defaultManager];
  [fileManager createDirectoryAtPath:name withIntermediateDirectories:true attributes:nil error:nil];
}

function saveTextToFile (filename, text) {
  var path = [@"" stringByAppendingString:filename];
  var str = [@"" stringByAppendingString:text];
  str.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(path, true);
}

function fileSaver() {
    // Panel
    var openPanel = [NSOpenPanel openPanel]

    [openPanel setTitle: "Choose a location…"]
    [openPanel setMessage: "Select the export location…"];
    [openPanel setPrompt: "Export"];

    [openPanel setCanCreateDirectories: true]
    [openPanel setCanChooseFiles: false]
    [openPanel setCanChooseDirectories: true]
    [openPanel setAllowsMultipleSelection: false]
    [openPanel setShowsHiddenFiles: false]
    [openPanel setExtensionHidden: false]

    // [openPanel setDirectoryURL:url]

    var openPanelButtonPressed = [openPanel runModal]
    if (openPanelButtonPressed == NSFileHandlingPanelOKButton) {
        allowedUrl = [openPanel URL]
    }
    return allowedUrl
}

// Resize the layer based on factor
function copy_layer_with_factor(original_slice, factor){
    var copySlice = [original_slice duplicate];
    var frame = [copySlice frame];

    var rect = [copySlice absoluteDirtyRect],
    slice = [MSExportRequest requestWithRect:rect scale:factor];
    [copySlice removeFromParent];
    
    log("Slicing " + slice);

    return slice;
}
